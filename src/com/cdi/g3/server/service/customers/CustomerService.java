package com.cdi.g3.server.service.customers;

import com.cdi.g3.common.exception.CheckException;
import com.cdi.g3.common.exception.CreateException;
import com.cdi.g3.common.exception.FinderException;
import com.cdi.g3.common.exception.ObjectNotFoundException;
import com.cdi.g3.common.exception.RemoveException;
import com.cdi.g3.common.exception.UpdateException;
import com.cdi.g3.common.logging.Trace;
import com.cdi.g3.server.domain.customers.Customer;
import com.cdi.g3.server.domain.customers.CustomerDAO;
import com.cdi.g3.server.service.AbstractService;
import java.util.Collection;




/**
 * This class is a facade for all customer services.
 */
public final class CustomerService extends AbstractService{

    // ======================================
    // = Attributes =
    // ======================================
    private static final CustomerDAO _dao = new CustomerDAO();

    // ======================================
    // = Constructors =
    // ======================================
    public CustomerService(){
        
    }

    // ======================================
    // = Business methods =
    // ======================================
    public Customer createCustomer( final Customer customer ) throws CreateException, CheckException {
        final String mname = "createCustomer";
        Trace.entering( _cname, mname, customer );

        if ( customer == null )
            throw new CreateException( "Customer object is null" );

        customer.checkData();
        checkId( customer.getId() );

        // Creates the object
        _dao.insert( customer );

        

        Trace.exiting( _cname, mname, customer );
        return customer;
    }

    public Customer findCustomer( final String customerId ) throws FinderException, CheckException {
        final String mname = "findCustomer";
        Trace.entering( _cname, mname, customerId );

        checkId( customerId );
        // Finds the object
        final Customer customer = (Customer) _dao.findByPrimaryKey( customerId );
        Trace.exiting( _cname, mname, customer );
        return customer;
    }

    public void deleteCustomer( final String customerId ) throws RemoveException, CheckException {
        final String mname = "deleteCustomer";
        Trace.entering( _cname, mname, customerId );

        checkId( customerId );

        // Checks if the object exists
        try {
            _dao.findByPrimaryKey( customerId );
        } catch ( FinderException e ) {
            throw new RemoveException( "Customer must exist to be deleted" );
        }

        // Deletes the object
        try {
            _dao.remove(customerId);
        } catch ( ObjectNotFoundException e ) {
            throw new RemoveException( "Customer must exist to be deleted" );
        }
    }

    public void updateCustomer( final Customer customerDTO  ) throws UpdateException, CheckException {
        final String mname = "updateCustomer";
        Trace.entering( _cname, mname, customerDTO );

        if ( customerDTO == null )
            throw new UpdateException( "Customer object is null" );

        checkId( customerDTO.getId() );

       final Customer customer;

        // Checks if the object exists
        try {
            customer = (Customer) _dao.findByPrimaryKey( customerDTO.getId() );
        } catch ( FinderException e ) {
            throw new UpdateException( "Customer must exist to be updated" );
        }
        
        customer.checkData();

        // Updates the object
        try {
            _dao.update( customer );
        } catch ( ObjectNotFoundException e ) {
            throw new UpdateException( "Customer must exist to be updated" );
        }
    }

    public Collection findCustomers() throws FinderException {
        final String mname = "findCustomers";
        Trace.entering( _cname, mname );

        // Finds all the objects
        final Collection customers = _dao.selectAll();
        
        Trace.exiting( _cname, mname, new Integer( customers.size() ) );
        return customers;
    }

    // ======================================
    // = Private Methods =
    // ======================================
    

    /**
     * This method returns a unique identifer generated by the system.
     * 
     * @return a unique identifer
     */
    public final String getUniqueId() {
        return _dao.getUniqueId();
    }

}
