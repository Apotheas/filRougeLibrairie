package com.cdi.g3.server.service.customers;

import com.cdi.g3.common.exception.CheckException;
import com.cdi.g3.common.exception.CreateException;
import com.cdi.g3.common.exception.FinderException;
import com.cdi.g3.common.exception.ObjectNotFoundException;
import com.cdi.g3.common.exception.RemoveException;
import com.cdi.g3.common.exception.UpdateException;
import com.cdi.g3.common.logging.Trace;
import com.cdi.g3.server.domain.customers.Customer;
import com.cdi.g3.server.domain.customers.CustomerDAO;
import com.cdi.g3.server.service.AbstractService;
import java.util.Collection;




/**
 * This class is a facade for all customer services.
 */
public final class CustomerService extends AbstractService{

    // ======================================
    // = Attributes =
    // ======================================
    private static final CustomerDAO _dao = new CustomerDAO();

    // ======================================
    // = Constructors =
    // ======================================
    public CustomerService(){
        
    }

    // ======================================
    // = Business methods =
    // ======================================
    public Customer createUser( final Customer user ) throws CreateException, CheckException {
        final String mname = "createUser";
        Trace.entering( _cname, mname, user );

        if ( user == null )
            throw new CreateException( "User object is null" );

        user.checkData();
        checkId( user.getId() );

        // Creates the object
        _dao.insert( user );

        

        Trace.exiting( _cname, mname, user );
        return user;
    }

    public Customer findUser( final String userId ) throws FinderException, CheckException {
        final String mname = "findUser";
        Trace.entering( _cname, mname, userId );

        checkId( userId );
        // Finds the object
        final Customer user = (Customer) _dao.findByPrimaryKey( userId );
        Trace.exiting( _cname, mname, user );
        return user;
    }

    public void deleteUser( final String userId ) throws RemoveException, CheckException {
        final String mname = "deleteUser";
        Trace.entering( _cname, mname, userId );

        checkId( userId );

        // Checks if the object exists
        try {
            _dao.findByPrimaryKey( userId );
        } catch ( FinderException e ) {
            throw new RemoveException( "User must exist to be deleted" );
        }

        // Deletes the object
        try {
            _dao.remove(userId);
        } catch ( ObjectNotFoundException e ) {
            throw new RemoveException( "User must exist to be deleted" );
        }
    }

    public void updateUser( final Customer userDTO  ) throws UpdateException, CheckException {
        final String mname = "updateUser";
        Trace.entering( _cname, mname, userDTO );

        if ( userDTO == null )
            throw new UpdateException( "User object is null" );

        checkId( userDTO.getId() );

       final Customer user;

        // Checks if the object exists
        try {
            user = (Customer) _dao.findByPrimaryKey( userDTO.getId() );
        } catch ( FinderException e ) {
            throw new UpdateException( "User must exist to be updated" );
        }

        // Transforms DTO into domain object
        user.setCity( userDTO.getCity() );
        user.setCountry( userDTO.getCountry() );
        user.setFirstname( userDTO.getFirstname() );
        user.setLastname( userDTO.getLastname() );
        user.setState( userDTO.getState() );
        user.setStreet1( userDTO.getStreet1() );
        user.setStreet2( userDTO.getStreet2() );
        user.setTelephone( userDTO.getTelephone() );
        user.setZipcode( userDTO.getZipcode() );
        user.setEmail( userDTO.getEmail() );
        user.setCreditCardExpiryDate( userDTO.getCreditCardExpiryDate() );
        user.setCreditCardNumber( userDTO.getCreditCardNumber() );
        user.setCreditCardType( userDTO.getCreditCardType() );

        user.checkData();

        // Updates the object
        try {
            _dao.update( user );
        } catch ( ObjectNotFoundException e ) {
            throw new UpdateException( "User must exist to be updated" );
        }
    }

    public Collection findUsers() throws FinderException {
        final String mname = "findUsers";
        Trace.entering( _cname, mname );

        // Finds all the objects
        final Collection users = _dao.selectAll();
        
        Trace.exiting( _cname, mname, new Integer( users.size() ) );
        return users;
    }

    // ======================================
    // = Private Methods =
    // ======================================
    

    /**
     * This method returns a unique identifer generated by the system.
     * 
     * @return a unique identifer
     */
    public final String getUniqueId() {
        return _dao.getUniqueId();
    }

}
